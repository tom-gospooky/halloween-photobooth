import { GoogleGenerativeAI } from '@google/generative-ai';
import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import { GeminiErrorHandler } from '../utils/geminiErrorHandler.js';

export class PhotoAnalysisService {
  constructor() {
    this.genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY);
    this.gemini25Model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });
    this.errorHandler = new GeminiErrorHandler();
  }

  getMasterPrompt() {
    try {
      // Priority 1: Read from master.md file
      if (fs.existsSync('./master.md')) {
        const masterPrompt = fs.readFileSync('./master.md', 'utf8').trim();
        if (masterPrompt) {
          console.log('üìã Using master prompt from master.md');
          return masterPrompt;
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Could not read master.md:', error.message);
    }

    // Priority 2: Environment variable
    if (process.env.MASTER_PROMPT) {
      console.log('üìù Using master prompt from MASTER_PROMPT env var');
      return process.env.MASTER_PROMPT;
    }

    // Priority 3: Default fallback
    console.log('üìù Using default master prompt');
    return "Transform this Halloween photo into a spooky 'Haunted High School' scene with supernatural elements, floating objects, and eerie lighting effects. Duration: 8 seconds.";
  }

  async generateVideoPrompt(imagePath) {
    try {
      console.log('üé≠ Generating video prompt with Gemini 2.5 Flash...');

      const masterPrompt = this.getMasterPrompt();

      // Convert image to base64
      const imageBuffer = await sharp(imagePath)
        .resize(1024, 1024, { fit: 'inside', withoutEnlargement: true })
        .jpeg({ quality: 80 })
        .toBuffer();

      const imageBase64 = imageBuffer.toString('base64');

      const result = await this.gemini25Model.generateContent([
        masterPrompt,
        {
          inlineData: {
            data: imageBase64,
            mimeType: 'image/jpeg'
          }
        }
      ]);

      const videoPrompt = result.response.text().trim();
      console.log('‚úÖ Video prompt generated by Gemini 2.5 Flash');
      console.log(`üìÑ Prompt length: ${videoPrompt.length} characters`);

      return videoPrompt;

    } catch (error) {
      console.error('‚ùå Gemini 2.5 Flash prompt generation failed:', error.message);

      // Fallback to master prompt directly (using same priority logic)
      const fallbackPrompt = this.getMasterPrompt();

      console.log('üîÑ Using fallback prompt');
      return fallbackPrompt;
    }
  }

}