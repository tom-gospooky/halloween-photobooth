#!/usr/bin/env node

import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { PhotoAnalysisService } from '../src/services/photoAnalysisService.js';
import { VideoGenerationService } from '../src/services/videoGenerationService.js';
import { GeminiErrorHandler } from '../src/utils/geminiErrorHandler.js';

// Load environment variables
dotenv.config();

const TEST_IMAGE_PATH = './test/foto_1.jpg';

async function checkTestImage() {
  // Use real Halloween image from /test folder
  if (!fs.existsSync(TEST_IMAGE_PATH)) {
    console.log('❌ Test image not found:', TEST_IMAGE_PATH);
    console.log('Expected: foto_1.jpg in /test folder');
    throw new Error('Test image missing');
  } else {
    const stats = fs.statSync(TEST_IMAGE_PATH);
    console.log('✅ Using real Halloween party photo from /test folder');
    console.log(`📊 Image size: ${Math.round(stats.size / 1024)}KB`);
  }
}

async function testGeminiVideoPrompt() {
  console.log('\n📝 Testing Gemini 2.5 Flash Video Prompt Generation...');

  try {
    const photoAnalysis = new PhotoAnalysisService();
    const videoPrompt = await photoAnalysis.generateVideoPrompt(TEST_IMAGE_PATH);

    console.log('✅ Video prompt generated by Gemini 2.5 Flash:');
    console.log('  📄 Length:', videoPrompt.length, 'characters');
    console.log('  📜 Content preview:', videoPrompt.substring(0, 150) + '...');

    return videoPrompt;

  } catch (error) {
    console.error('❌ Gemini video prompt generation failed:', error.message);

    const fallbackPrompt = process.env.MASTER_PROMPT ||
      "Transform this Halloween photo into a spooky scene with supernatural elements. Duration: 8 seconds.";
    console.log('🔄 Using fallback prompt');

    return fallbackPrompt;
  }
}

async function testMasterPrompt() {
  console.log('\n🎭 Testing Master Prompt Configuration...');

  try {
    const photoAnalysis = new PhotoAnalysisService();
    const masterPrompt = photoAnalysis.getMasterPrompt();

    console.log('✅ Master prompt loaded successfully');
    console.log('  📄 Length:', masterPrompt.length, 'characters');
    console.log('  📜 Source: See console output above for specific source');

    if (masterPrompt.length > 500) {
      console.log('  📋 Complex prompt detected - likely from master.md');
    } else {
      console.log('  📝 Simple prompt - likely from env var or default');
    }

    return masterPrompt;

  } catch (error) {
    console.error('❌ Master prompt check failed:', error.message);
    return null;
  }
}


async function testVideoGeneration(geminiOutputText, imagePath) {
  console.log('\n🎬 Testing WAN 2.2 Turbo Video Generation...');

  try {
    const videoGeneration = new VideoGenerationService();
    const videoPath = await videoGeneration.generateVideo(geminiOutputText, imagePath, 'test-photo.jpg');
    
    console.log('✅ Video generation completed:', path.basename(videoPath));
    
    // Check if file exists and has reasonable size
    if (fs.existsSync(videoPath)) {
      const stats = fs.statSync(videoPath);
      console.log('  📁 File size:', Math.round(stats.size / 1024), 'KB');
      
      if (stats.size > 1000) { // At least 1KB
        console.log('  ✅ Video file appears valid');
      } else {
        console.log('  ⚠️  Video file seems small (might be placeholder)');
      }
    }
    
    return videoPath;
    
  } catch (error) {
    console.error('❌ WAN video generation failed:', error.message);
    console.log('🔄 This would trigger placeholder fallback in production');
    return null;
  }
}

async function testErrorHandling() {
  console.log('\n🛡️  Testing Error Handling...');
  
  const errorHandler = new GeminiErrorHandler();
  
  // Test different error types
  const testErrors = [
    { message: 'rate limit exceeded', status: 429 },
    { message: 'api key invalid', status: 401 },
    { message: 'content filtered by safety', status: 400 },
    { message: 'network timeout', code: 'ECONNRESET' }
  ];
  
  for (const testError of testErrors) {
    const errorInfo = errorHandler.parseGeminiError(testError);
    console.log(`  📋 Error type "${testError.message}": ${errorInfo.type}`);
  }
  
  console.log('✅ Error handling patterns identified correctly');
}

async function runFullWorkflowTest() {
  console.log('🎃 Halloween AI Photobooth - Workflow Test\n');
  
  try {
    // Ensure temp directory exists
    if (!fs.existsSync('./temp')) {
      fs.mkdirSync('./temp');
    }
    
    // Test each component - new simplified 2-step workflow
    await checkTestImage();
    await testMasterPrompt();
    const geminiVideoPrompt = await testGeminiVideoPrompt();
    const videoPath = await testVideoGeneration(geminiVideoPrompt, TEST_IMAGE_PATH);
    await testErrorHandling();
    
    console.log('\n🎉 Simplified 2-Step Workflow Test Summary:');
    console.log('✅ Step 1: Gemini 2.5 Flash + master.md → Video prompt generation');
    console.log('✅ Step 2: WAN 2.2 Turbo + Gemini output + Image → Video generation');
    console.log('✅ Master Prompt: Priority: master.md → MASTER_PROMPT → default');
    console.log('✅ Error Handling: Robust with fallbacks');
    
    console.log('\n📋 Next Steps:');
    console.log('1. Add your real Gemini API key to .env (✅ Done)');
    console.log('2. Add your FAL_KEY to .env (✅ Done)');
    console.log('3. Edit master.md to customize sophisticated film direction prompts');
    console.log('4. Test workflow: Image + master.md → Gemini 2.5 → WAN 2.2 Turbo');
    console.log('5. Run the full system with: npm run dev');
    
    // Cleanup test files (optional)
    const cleanup = process.argv.includes('--cleanup');
    if (cleanup) {
      console.log('\n🧹 Cleaning up test files...');
      [TEST_IMAGE_PATH, videoPath].forEach(filePath => {
        if (filePath && fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
          console.log('  🗑️  Deleted:', path.basename(filePath));
        }
      });
    }
    
  } catch (error) {
    console.error('❌ Workflow test failed:', error);
    process.exit(1);
  }
}

// Run the test if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runFullWorkflowTest()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('Test failed:', error);
      process.exit(1);
    });
}